/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Mentorship API
 * API documentation for the Mentorship microservice
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface ScheduleSessionRequest {
  id?: string;
  startOn?: string;
  endOn?: string;
}

export type MentorApplicationStatus =
  (typeof MentorApplicationStatus)[keyof typeof MentorApplicationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentorApplicationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
} as const;

export interface MentorApplication {
  id?: string;
  mentorId?: string;
  menteeId?: string;
  applicationMessage?: string;
  summarizedApplicationMessage?: string;
  status?: MentorApplicationStatus;
  appliedOn?: string;
  session?: MentorSession;
}

export type MentorSessionStatus =
  (typeof MentorSessionStatus)[keyof typeof MentorSessionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MentorSessionStatus = {
  ACTIVE: 'ACTIVE',
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
} as const;

export interface MentorSession {
  id?: string;
  startOn?: string;
  endOn?: string;
  status?: MentorSessionStatus;
}

export interface ScheduleSessionResponse {
  application?: MentorApplication;
}

export interface RejectApplicationResponse {
  application?: MentorApplication;
}

export interface AcceptApplicationResponse {
  application?: MentorApplication;
}

export type ComparisonFilterOperator =
  (typeof ComparisonFilterOperator)[keyof typeof ComparisonFilterOperator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ComparisonFilterOperator = {
  GREATER_THAN: 'GREATER_THAN',
  GREATER_THAN_OR_EQUAL: 'GREATER_THAN_OR_EQUAL',
  LESS_THAN: 'LESS_THAN',
  LESS_THAN_OR_EQUAL: 'LESS_THAN_OR_EQUAL',
  EQUAL: 'EQUAL',
} as const;

export interface ComparisonFilter {
  operator?: ComparisonFilterOperator;
  value?: number;
}

export interface ListMentorProfileRequest {
  categoryIds?: string[];
  skillIds?: string[];
  yearsOfExperienceFilter?: ComparisonFilter;
}

export interface Category {
  id?: string;
  name?: string;
}

export interface ListMentorProfileResponse {
  mentorProfiles?: MentorProfile[];
}

export interface MentorCategory {
  category?: Category;
  yearsOfExperience?: number;
}

export interface MentorProfile {
  id?: string;
  mentorId?: string;
  bio?: string;
  skills?: Skill[];
  isAvailable?: boolean;
  mentorCategory?: MentorCategory;
}

export interface Skill {
  id?: string;
  name?: string;
}

export interface CreateSkillRequest {
  id?: string;
  skill?: string;
}

export interface CreateSkillResponse {
  skill?: Skill;
}

export interface CreateMentorProfileRequest {
  mentorProfile?: MentorProfile;
}

export interface CreateMentorProfileResponse {
  mentorProfile?: MentorProfile;
}

export interface CreateCategoryRequest {
  id?: string;
  category?: string;
}

export interface CreateCategoryResponse {
  category?: Category;
}

export interface CreateApplicationRequest {
  mentorId?: string;
  menteeId?: string;
  applicationMessage?: string;
}

export interface CreateApplicationResponse {
  application?: MentorApplication;
}

export interface UpdateMentorProfileRequest {
  mentorProfile?: MentorProfile;
}

export interface UpdateMentorProfileResponse {
  mentorProfile?: MentorProfile;
}

export interface ListSkillResponse {
  skills?: Skill[];
}

export interface ListCategoryResponse {
  categories?: Category[];
}

export interface ListApplicationResponse {
  applications?: MentorApplication[];
}

export interface GetMentorProfileResponse {
  profile?: MentorProfile;
}

export interface GetApplicationResponse {
  application?: MentorApplication;
}

export interface DeleteMentorProfileRequest {
  profileId?: string;
}

export interface DeleteMentorProfileResponse {
  mentorProfile?: MentorProfile;
}

export type ListApplicationsParams = {
  mentorId?: string;
  menteeId?: string;
};

export type GetMentorProfileParams = {
  mentorId: string;
};

export const scheduleSession = (
  scheduleSessionRequest: ScheduleSessionRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ScheduleSessionResponse>> => {
  return axios.default.put(
    `http://localhost:8310/api/mentorship/scheduleSession`,
    scheduleSessionRequest,
    options,
  );
};

export const getScheduleSessionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scheduleSession>>,
    TError,
    { data: ScheduleSessionRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scheduleSession>>,
  TError,
  { data: ScheduleSessionRequest },
  TContext
> => {
  const mutationKey = ['scheduleSession'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scheduleSession>>,
    { data: ScheduleSessionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return scheduleSession(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScheduleSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof scheduleSession>>
>;
export type ScheduleSessionMutationBody = ScheduleSessionRequest;
export type ScheduleSessionMutationError = AxiosError<unknown>;

export const useScheduleSession = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scheduleSession>>,
      TError,
      { data: ScheduleSessionRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scheduleSession>>,
  TError,
  { data: ScheduleSessionRequest },
  TContext
> => {
  const mutationOptions = getScheduleSessionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const rejectApplication = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RejectApplicationResponse>> => {
  return axios.default.put(
    `http://localhost:8310/api/mentorship/rejectApplication/${id}`,
    undefined,
    options,
  );
};

export const getRejectApplicationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rejectApplication>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rejectApplication>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['rejectApplication'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rejectApplication>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return rejectApplication(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RejectApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof rejectApplication>>
>;

export type RejectApplicationMutationError = AxiosError<unknown>;

export const useRejectApplication = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof rejectApplication>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof rejectApplication>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getRejectApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const acceptApplication = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<AcceptApplicationResponse>> => {
  return axios.default.put(
    `http://localhost:8310/api/mentorship/acceptApplication/${id}`,
    undefined,
    options,
  );
};

export const getAcceptApplicationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptApplication>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptApplication>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['acceptApplication'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptApplication>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return acceptApplication(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AcceptApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptApplication>>
>;

export type AcceptApplicationMutationError = AxiosError<unknown>;

export const useAcceptApplication = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptApplication>>,
      TError,
      { id: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof acceptApplication>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getAcceptApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const listMentorProfiles = (
  listMentorProfileRequest: ListMentorProfileRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListMentorProfileResponse>> => {
  return axios.default.post(
    `http://localhost:8310/api/mentorship/listMentorProfiles`,
    listMentorProfileRequest,
    options,
  );
};

export const getListMentorProfilesMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof listMentorProfiles>>,
    TError,
    { data: ListMentorProfileRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof listMentorProfiles>>,
  TError,
  { data: ListMentorProfileRequest },
  TContext
> => {
  const mutationKey = ['listMentorProfiles'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof listMentorProfiles>>,
    { data: ListMentorProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return listMentorProfiles(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ListMentorProfilesMutationResult = NonNullable<
  Awaited<ReturnType<typeof listMentorProfiles>>
>;
export type ListMentorProfilesMutationBody = ListMentorProfileRequest;
export type ListMentorProfilesMutationError = AxiosError<unknown>;

export const useListMentorProfiles = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof listMentorProfiles>>,
      TError,
      { data: ListMentorProfileRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof listMentorProfiles>>,
  TError,
  { data: ListMentorProfileRequest },
  TContext
> => {
  const mutationOptions = getListMentorProfilesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createSkill = (
  createSkillRequest: CreateSkillRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateSkillResponse>> => {
  return axios.default.post(
    `http://localhost:8310/api/mentorship/createSkill`,
    createSkillRequest,
    options,
  );
};

export const getCreateSkillMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSkill>>,
    TError,
    { data: CreateSkillRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSkill>>,
  TError,
  { data: CreateSkillRequest },
  TContext
> => {
  const mutationKey = ['createSkill'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSkill>>,
    { data: CreateSkillRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createSkill(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSkillMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSkill>>
>;
export type CreateSkillMutationBody = CreateSkillRequest;
export type CreateSkillMutationError = AxiosError<unknown>;

export const useCreateSkill = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSkill>>,
      TError,
      { data: CreateSkillRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSkill>>,
  TError,
  { data: CreateSkillRequest },
  TContext
> => {
  const mutationOptions = getCreateSkillMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createMentorProfile = (
  createMentorProfileRequest: CreateMentorProfileRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateMentorProfileResponse>> => {
  return axios.default.post(
    `http://localhost:8310/api/mentorship/createMentorProfile`,
    createMentorProfileRequest,
    options,
  );
};

export const getCreateMentorProfileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMentorProfile>>,
    TError,
    { data: CreateMentorProfileRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMentorProfile>>,
  TError,
  { data: CreateMentorProfileRequest },
  TContext
> => {
  const mutationKey = ['createMentorProfile'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMentorProfile>>,
    { data: CreateMentorProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createMentorProfile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMentorProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMentorProfile>>
>;
export type CreateMentorProfileMutationBody = CreateMentorProfileRequest;
export type CreateMentorProfileMutationError = AxiosError<unknown>;

export const useCreateMentorProfile = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMentorProfile>>,
      TError,
      { data: CreateMentorProfileRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMentorProfile>>,
  TError,
  { data: CreateMentorProfileRequest },
  TContext
> => {
  const mutationOptions = getCreateMentorProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createCategory = (
  createCategoryRequest: CreateCategoryRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateCategoryResponse>> => {
  return axios.default.post(
    `http://localhost:8310/api/mentorship/createCategory`,
    createCategoryRequest,
    options,
  );
};

export const getCreateCategoryMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCategory>>,
    TError,
    { data: CreateCategoryRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCategory>>,
  TError,
  { data: CreateCategoryRequest },
  TContext
> => {
  const mutationKey = ['createCategory'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCategory>>,
    { data: CreateCategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createCategory(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCategory>>
>;
export type CreateCategoryMutationBody = CreateCategoryRequest;
export type CreateCategoryMutationError = AxiosError<unknown>;

export const useCreateCategory = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCategory>>,
      TError,
      { data: CreateCategoryRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCategory>>,
  TError,
  { data: CreateCategoryRequest },
  TContext
> => {
  const mutationOptions = getCreateCategoryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createApplication = (
  createApplicationRequest: CreateApplicationRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateApplicationResponse>> => {
  return axios.default.post(
    `http://localhost:8310/api/mentorship/createApplication`,
    createApplicationRequest,
    options,
  );
};

export const getCreateApplicationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createApplication>>,
    TError,
    { data: CreateApplicationRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createApplication>>,
  TError,
  { data: CreateApplicationRequest },
  TContext
> => {
  const mutationKey = ['createApplication'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createApplication>>,
    { data: CreateApplicationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createApplication(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateApplicationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createApplication>>
>;
export type CreateApplicationMutationBody = CreateApplicationRequest;
export type CreateApplicationMutationError = AxiosError<unknown>;

export const useCreateApplication = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createApplication>>,
      TError,
      { data: CreateApplicationRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createApplication>>,
  TError,
  { data: CreateApplicationRequest },
  TContext
> => {
  const mutationOptions = getCreateApplicationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateMentorProfile = (
  updateMentorProfileRequest: UpdateMentorProfileRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateMentorProfileResponse>> => {
  return axios.default.patch(
    `http://localhost:8310/api/mentorship/updateMentorProfile`,
    updateMentorProfileRequest,
    options,
  );
};

export const getUpdateMentorProfileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMentorProfile>>,
    TError,
    { data: UpdateMentorProfileRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMentorProfile>>,
  TError,
  { data: UpdateMentorProfileRequest },
  TContext
> => {
  const mutationKey = ['updateMentorProfile'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMentorProfile>>,
    { data: UpdateMentorProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateMentorProfile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMentorProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMentorProfile>>
>;
export type UpdateMentorProfileMutationBody = UpdateMentorProfileRequest;
export type UpdateMentorProfileMutationError = AxiosError<unknown>;

export const useUpdateMentorProfile = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMentorProfile>>,
      TError,
      { data: UpdateMentorProfileRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMentorProfile>>,
  TError,
  { data: UpdateMentorProfileRequest },
  TContext
> => {
  const mutationOptions = getUpdateMentorProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const listSkills = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListSkillResponse>> => {
  return axios.default.get(
    `http://localhost:8310/api/mentorship/listSkills`,
    options,
  );
};

export const getListSkillsQueryKey = () => {
  return [`http://localhost:8310/api/mentorship/listSkills`] as const;
};

export const getListSkillsQueryOptions = <
  TData = Awaited<ReturnType<typeof listSkills>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listSkills>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListSkillsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listSkills>>> = ({
    signal,
  }) => listSkills({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listSkills>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListSkillsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listSkills>>
>;
export type ListSkillsQueryError = AxiosError<unknown>;

export function useListSkills<
  TData = Awaited<ReturnType<typeof listSkills>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listSkills>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSkills>>,
          TError,
          Awaited<ReturnType<typeof listSkills>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListSkills<
  TData = Awaited<ReturnType<typeof listSkills>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listSkills>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listSkills>>,
          TError,
          Awaited<ReturnType<typeof listSkills>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListSkills<
  TData = Awaited<ReturnType<typeof listSkills>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listSkills>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListSkills<
  TData = Awaited<ReturnType<typeof listSkills>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listSkills>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListSkillsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const listCategories = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListCategoryResponse>> => {
  return axios.default.get(
    `http://localhost:8310/api/mentorship/listCategories`,
    options,
  );
};

export const getListCategoriesQueryKey = () => {
  return [`http://localhost:8310/api/mentorship/listCategories`] as const;
};

export const getListCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof listCategories>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListCategoriesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCategories>>> = ({
    signal,
  }) => listCategories({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listCategories>>
>;
export type ListCategoriesQueryError = AxiosError<unknown>;

export function useListCategories<
  TData = Awaited<ReturnType<typeof listCategories>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCategories>>,
          TError,
          Awaited<ReturnType<typeof listCategories>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategories<
  TData = Awaited<ReturnType<typeof listCategories>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCategories>>,
          TError,
          Awaited<ReturnType<typeof listCategories>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCategories<
  TData = Awaited<ReturnType<typeof listCategories>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListCategories<
  TData = Awaited<ReturnType<typeof listCategories>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCategories>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListCategoriesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const listApplications = (
  params?: ListApplicationsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListApplicationResponse>> => {
  return axios.default.get(
    `http://localhost:8310/api/mentorship/listApplications`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getListApplicationsQueryKey = (
  params?: ListApplicationsParams,
) => {
  return [
    `http://localhost:8310/api/mentorship/listApplications`,
    ...(params ? [params] : []),
  ] as const;
};

export const getListApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof listApplications>>,
  TError = AxiosError<unknown>,
>(
  params?: ListApplicationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listApplications>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListApplicationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listApplications>>
  > = ({ signal }) => listApplications(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listApplications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listApplications>>
>;
export type ListApplicationsQueryError = AxiosError<unknown>;

export function useListApplications<
  TData = Awaited<ReturnType<typeof listApplications>>,
  TError = AxiosError<unknown>,
>(
  params: undefined | ListApplicationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listApplications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listApplications>>,
          TError,
          Awaited<ReturnType<typeof listApplications>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListApplications<
  TData = Awaited<ReturnType<typeof listApplications>>,
  TError = AxiosError<unknown>,
>(
  params?: ListApplicationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listApplications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listApplications>>,
          TError,
          Awaited<ReturnType<typeof listApplications>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListApplications<
  TData = Awaited<ReturnType<typeof listApplications>>,
  TError = AxiosError<unknown>,
>(
  params?: ListApplicationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listApplications>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListApplications<
  TData = Awaited<ReturnType<typeof listApplications>>,
  TError = AxiosError<unknown>,
>(
  params?: ListApplicationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listApplications>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListApplicationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getMentorProfile = (
  params: GetMentorProfileParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetMentorProfileResponse>> => {
  return axios.default.get(
    `http://localhost:8310/api/mentorship/getMentorProfile`,
    {
      ...options,
      params: { ...params, ...options?.params },
    },
  );
};

export const getGetMentorProfileQueryKey = (params: GetMentorProfileParams) => {
  return [
    `http://localhost:8310/api/mentorship/getMentorProfile`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetMentorProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getMentorProfile>>,
  TError = AxiosError<unknown>,
>(
  params: GetMentorProfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMentorProfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetMentorProfileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getMentorProfile>>
  > = ({ signal }) => getMentorProfile(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMentorProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMentorProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMentorProfile>>
>;
export type GetMentorProfileQueryError = AxiosError<unknown>;

export function useGetMentorProfile<
  TData = Awaited<ReturnType<typeof getMentorProfile>>,
  TError = AxiosError<unknown>,
>(
  params: GetMentorProfileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMentorProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMentorProfile>>,
          TError,
          Awaited<ReturnType<typeof getMentorProfile>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMentorProfile<
  TData = Awaited<ReturnType<typeof getMentorProfile>>,
  TError = AxiosError<unknown>,
>(
  params: GetMentorProfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMentorProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMentorProfile>>,
          TError,
          Awaited<ReturnType<typeof getMentorProfile>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMentorProfile<
  TData = Awaited<ReturnType<typeof getMentorProfile>>,
  TError = AxiosError<unknown>,
>(
  params: GetMentorProfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMentorProfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMentorProfile<
  TData = Awaited<ReturnType<typeof getMentorProfile>>,
  TError = AxiosError<unknown>,
>(
  params: GetMentorProfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getMentorProfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMentorProfileQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApplication = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApplicationResponse>> => {
  return axios.default.get(
    `http://localhost:8310/api/mentorship/application/${id}`,
    options,
  );
};

export const getGetApplicationQueryKey = (id: string) => {
  return [`http://localhost:8310/api/mentorship/application/${id}`] as const;
};

export const getGetApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApplication>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApplicationQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplication>>> = ({
    signal,
  }) => getApplication(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApplication>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApplication>>
>;
export type GetApplicationQueryError = AxiosError<unknown>;

export function useGetApplication<
  TData = Awaited<ReturnType<typeof getApplication>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplication>>,
          TError,
          Awaited<ReturnType<typeof getApplication>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApplication<
  TData = Awaited<ReturnType<typeof getApplication>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplication>>,
          TError,
          Awaited<ReturnType<typeof getApplication>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApplication<
  TData = Awaited<ReturnType<typeof getApplication>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApplication<
  TData = Awaited<ReturnType<typeof getApplication>>,
  TError = AxiosError<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApplication>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApplicationQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteMentorProfile = (
  deleteMentorProfileRequest: DeleteMentorProfileRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteMentorProfileResponse>> => {
  return axios.default.delete(
    `http://localhost:8310/api/mentorship/deleteMentorProfile`,
    { data: deleteMentorProfileRequest, ...options },
  );
};

export const getDeleteMentorProfileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMentorProfile>>,
    TError,
    { data: DeleteMentorProfileRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMentorProfile>>,
  TError,
  { data: DeleteMentorProfileRequest },
  TContext
> => {
  const mutationKey = ['deleteMentorProfile'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMentorProfile>>,
    { data: DeleteMentorProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteMentorProfile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMentorProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMentorProfile>>
>;
export type DeleteMentorProfileMutationBody = DeleteMentorProfileRequest;
export type DeleteMentorProfileMutationError = AxiosError<unknown>;

export const useDeleteMentorProfile = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMentorProfile>>,
      TError,
      { data: DeleteMentorProfileRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMentorProfile>>,
  TError,
  { data: DeleteMentorProfileRequest },
  TContext
> => {
  const mutationOptions = getDeleteMentorProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
