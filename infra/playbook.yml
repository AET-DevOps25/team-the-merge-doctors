---
- name: Setup ec2 for app with docker & docker compose
  hosts: all # Target all hosts in the inventory file for this playbook run.
  become: true # Elevate privilege using sudo or the appropriate privilege escalation method.
  vars:
    compose_dir: /home/ubuntu
  vars_files:
    - packages.yml
    - keys.yml
    - token.yml
  tasks:
    - name: Add repositories
      ansible.builtin.deb822_repository:
        name: "{{ item.name }}"
        types: [deb]
        uris: "{{ item.uri }}"
        signed_by: "{{ item.key }}"
        suites: ["{{ item.suite }}"]
        components: ["{{ item.component }}"]
        state: present
        enabled: true
      loop: "{{ key_list }}" # from keys.yml
      loop_control:
        label: "{{ item.name }}"

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        force_apt_get: true

    - name: Install packages
      ansible.builtin.apt:
        name: "{{ packages }}"
        state: present
        update_cache: true
        force_apt_get: true

    - name: Login to CR 
      community.docker.docker_login:
        registry: "ghcr.io"
        username: "{{ cr_username }}"
        password: "{{ token }}"
        state: present

    - name: Copy compose file to remote
      ansible.builtin.copy:
        src: ./compose.prod.yml
        dest: "/home/ubuntu/compose.prod.yml"
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Write public IP to .env.production
      ansible.builtin.lineinfile:
        path: "{{ compose_dir }}/.env.production"
        line: "PUBLIC_IP={{ hostvars[inventory_hostname]['ansible_host'] }}"
        create: yes
        mode: '0644'

    - name: Create docker backend config files directory
      ansible.builtin.file:
        path: /home/ubuntu/docker/backend_config_files
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy backend config .env to remote
      ansible.builtin.copy:
        src: ../docker/backend_config_files/.env
        dest: /home/ubuntu/docker/backend_config_files/.env
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Copy postgres-init.sh to remote
      ansible.builtin.copy:
        src: ../docker/backend_config_files/postgres-init.sh
        dest: /home/ubuntu/docker/backend_config_files/postgres-init.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy pg-hba.conf to remote
      ansible.builtin.copy:
        src: ../docker/backend_config_files/pg-hba.conf
        dest: /home/ubuntu/docker/backend_config_files/pg-hba.conf
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Copy jwt-key-generator.sh to remote
      ansible.builtin.copy:
        src: ../docker/backend_config_files/jwt-key-generator.sh
        dest: /home/ubuntu/docker/backend_config_files/jwt-key-generator.sh
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Run jwt-key-generator.sh script
      ansible.builtin.shell: bash /home/ubuntu/docker/backend_config_files/jwt-key-generator.sh
      args:
        chdir: /home/ubuntu/docker/backend_config_files
      become: true
      become_user: ubuntu

    - name: Clean images
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files:
          - compose.prod.yml
        state: absent
        remove_images: local
        remove_volumes: true
        remove_orphans: true

    - name: Run application
      community.docker.docker_compose_v2:
        project_src: "{{ compose_dir }}"
        files:
          - compose.prod.yml
        state: present
        env_files:
          - "{{ compose_dir }}/.env.production"