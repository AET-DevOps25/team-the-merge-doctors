/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as TestImport } from './pages/test'
import { Route as SignupImport } from './pages/signup'
import { Route as MentorProfileImport } from './pages/mentor-profile'
import { Route as LoginImport } from './pages/login'
import { Route as IndexImport } from './pages/index'
import { Route as SearchIndexImport } from './pages/search/index'
import { Route as MentorMentorIdImport } from './pages/mentor.$mentorId'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const MentorProfileRoute = MentorProfileImport.update({
  id: '/mentor-profile',
  path: '/mentor-profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const MentorMentorIdRoute = MentorMentorIdImport.update({
  id: '/mentor/$mentorId',
  path: '/mentor/$mentorId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mentor-profile': {
      id: '/mentor-profile'
      path: '/mentor-profile'
      fullPath: '/mentor-profile'
      preLoaderRoute: typeof MentorProfileImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/mentor/$mentorId': {
      id: '/mentor/$mentorId'
      path: '/mentor/$mentorId'
      fullPath: '/mentor/$mentorId'
      preLoaderRoute: typeof MentorMentorIdImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mentor-profile': typeof MentorProfileRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/mentor/$mentorId': typeof MentorMentorIdRoute
  '/search': typeof SearchIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mentor-profile': typeof MentorProfileRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/mentor/$mentorId': typeof MentorMentorIdRoute
  '/search': typeof SearchIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mentor-profile': typeof MentorProfileRoute
  '/signup': typeof SignupRoute
  '/test': typeof TestRoute
  '/mentor/$mentorId': typeof MentorMentorIdRoute
  '/search/': typeof SearchIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/mentor-profile'
    | '/signup'
    | '/test'
    | '/mentor/$mentorId'
    | '/search'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/mentor-profile'
    | '/signup'
    | '/test'
    | '/mentor/$mentorId'
    | '/search'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/mentor-profile'
    | '/signup'
    | '/test'
    | '/mentor/$mentorId'
    | '/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  MentorProfileRoute: typeof MentorProfileRoute
  SignupRoute: typeof SignupRoute
  TestRoute: typeof TestRoute
  MentorMentorIdRoute: typeof MentorMentorIdRoute
  SearchIndexRoute: typeof SearchIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  MentorProfileRoute: MentorProfileRoute,
  SignupRoute: SignupRoute,
  TestRoute: TestRoute,
  MentorMentorIdRoute: MentorMentorIdRoute,
  SearchIndexRoute: SearchIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/mentor-profile",
        "/signup",
        "/test",
        "/mentor/$mentorId",
        "/search/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mentor-profile": {
      "filePath": "mentor-profile.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/mentor/$mentorId": {
      "filePath": "mentor.$mentorId.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
