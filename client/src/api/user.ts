/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * User API
 * API documentation for the User microservice
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface LoginUserRequest {
  userName?: string;
  password?: string;
}

export interface Address {
  city?: string;
  country?: string;
}

export interface Contact {
  email?: string;
  phoneNumber?: string;
  mobileNumber?: string;
}

export interface LoginUserResponse {
  authenticated?: boolean;
  token?: string;
  user?: UserDto;
}

export interface Name {
  title?: string;
  firstName?: string;
  middleName?: string;
  lastName?: string;
}

export type UserDtoRole = (typeof UserDtoRole)[keyof typeof UserDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDtoRole = {
  NONE: 'NONE',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
} as const;

export interface UserDto {
  id?: string;
  userName?: string;
  name?: Name;
  address?: Address;
  contact?: Contact;
  role?: UserDtoRole;
  createdAt?: string;
  lastLoginAt?: string;
}

export type CreateUserRequestRoleType =
  (typeof CreateUserRequestRoleType)[keyof typeof CreateUserRequestRoleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUserRequestRoleType = {
  NONE: 'NONE',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
} as const;

export interface CreateUserRequest {
  id?: string;
  userName?: string;
  password?: string;
  name?: Name;
  contact?: Contact;
  address?: Address;
  roleType?: CreateUserRequestRoleType;
}

export interface CreateUserResponse {
  userId?: string;
  token?: string;
}

export interface UpdateUserRequest {
  user?: User;
}

export type UserRoleType = (typeof UserRoleType)[keyof typeof UserRoleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRoleType = {
  NONE: 'NONE',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
} as const;

export interface User {
  id?: string;
  userName?: string;
  passwordHash?: string;
  name?: Name;
  address?: Address;
  contact?: Contact;
  roleType?: UserRoleType;
  createdAt?: string;
  lastLoginAt?: string;
  password?: string;
  username?: string;
  enabled?: boolean;
  accountNonExpired?: boolean;
  accountNonLocked?: boolean;
  credentialsNonExpired?: boolean;
}

export interface UpdateUserResponse {
  updatedUser?: UserDto;
}

export interface ListUsersResponse {
  users?: UserDto[];
}

export interface GetUserResponse {
  user?: UserDto;
}

export interface DeleteUserRequest {
  userId?: string;
}

export interface DeleteUserResponse {
  user?: UserDto;
}

export type ListUsersParams = {
  roleType: ListUsersRoleType;
};

export type ListUsersRoleType =
  (typeof ListUsersRoleType)[keyof typeof ListUsersRoleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ListUsersRoleType = {
  NONE: 'NONE',
  MENTOR: 'MENTOR',
  MENTEE: 'MENTEE',
} as const;

export type GetUserParams = {
  userId: string;
};

export const loginUser = (
  loginUserRequest: LoginUserRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<LoginUserResponse>> => {
  return axios.default.post(
    `http://localhost:8210/api/user/login`,
    loginUserRequest,
    options,
  );
};

export const getLoginUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: LoginUserRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginUserRequest },
  TContext
> => {
  const mutationKey = ['loginUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUser>>,
    { data: LoginUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return loginUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = LoginUserRequest;
export type LoginUserMutationError = AxiosError<unknown>;

export const useLoginUser = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      { data: LoginUserRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginUserRequest },
  TContext
> => {
  const mutationOptions = getLoginUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createUser = (
  createUserRequest: CreateUserRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateUserResponse>> => {
  return axios.default.post(
    `http://localhost:8210/api/user/createUser`,
    createUserRequest,
    options,
  );
};

export const getCreateUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: CreateUserRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationKey = ['createUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: CreateUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = CreateUserRequest;
export type CreateUserMutationError = AxiosError<unknown>;

export const useCreateUser = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUser>>,
      TError,
      { data: CreateUserRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: CreateUserRequest },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateUser = (
  updateUserRequest: UpdateUserRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateUserResponse>> => {
  return axios.default.patch(
    `http://localhost:8210/api/user/updateUser`,
    updateUserRequest,
    options,
  );
};

export const getUpdateUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { data: UpdateUserRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { data: UpdateUserRequest },
  TContext
> => {
  const mutationKey = ['updateUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { data: UpdateUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = UpdateUserRequest;
export type UpdateUserMutationError = AxiosError<unknown>;

export const useUpdateUser = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUser>>,
      TError,
      { data: UpdateUserRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUser>>,
  TError,
  { data: UpdateUserRequest },
  TContext
> => {
  const mutationOptions = getUpdateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const listUsers = (
  params: ListUsersParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ListUsersResponse>> => {
  return axios.default.get(`http://localhost:8210/api/user/listUsers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getListUsersQueryKey = (params: ListUsersParams) => {
  return [
    `http://localhost:8210/api/user/listUsers`,
    ...(params ? [params] : []),
  ] as const;
};

export const getListUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
    signal,
  }) => listUsers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = AxiosError<unknown>;

export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: ListUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listUsers>>,
          TError,
          Awaited<ReturnType<typeof listUsers>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListUsers<
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = AxiosError<unknown>,
>(
  params: ListUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listUsers>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUser = (
  params: GetUserParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetUserResponse>> => {
  return axios.default.get(`http://localhost:8210/api/user/getUser`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetUserQueryKey = (params: GetUserParams) => {
  return [
    `http://localhost:8210/api/user/getUser`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = AxiosError<unknown>,
>(
  params: GetUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
    signal,
  }) => getUser(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = AxiosError<unknown>;

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = AxiosError<unknown>,
>(
  params: GetUserParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = AxiosError<unknown>,
>(
  params: GetUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = AxiosError<unknown>,
>(
  params: GetUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUser<
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = AxiosError<unknown>,
>(
  params: GetUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteUser = (
  deleteUserRequest: DeleteUserRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteUserResponse>> => {
  return axios.default.delete(`http://localhost:8210/api/user/deleteUser`, {
    data: deleteUserRequest,
    ...options,
  });
};

export const getDeleteUserMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { data: DeleteUserRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { data: DeleteUserRequest },
  TContext
> => {
  const mutationKey = ['deleteUser'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { data: DeleteUserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return deleteUser(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;
export type DeleteUserMutationBody = DeleteUserRequest;
export type DeleteUserMutationError = AxiosError<unknown>;

export const useDeleteUser = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteUser>>,
      TError,
      { data: DeleteUserRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteUser>>,
  TError,
  { data: DeleteUserRequest },
  TContext
> => {
  const mutationOptions = getDeleteUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
