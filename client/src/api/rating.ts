/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Rating API
 * API documentation for the Rating microservice
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import * as axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface Rating {
  id?: string;
  mentorId?: string;
  menteeId?: string;
  rating?: number;
  message?: string;
}

export interface MentorAverageRating {
  mentorId?: string;
  averageRating?: number;
}

export const rateMentor = (
  rating: Rating,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Rating>> => {
  return axios.default.post(`/api/rating/rateMentor`, rating, options);
};

export const getRateMentorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rateMentor>>,
    TError,
    { data: Rating },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof rateMentor>>,
  TError,
  { data: Rating },
  TContext
> => {
  const mutationKey = ['rateMentor'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rateMentor>>,
    { data: Rating }
  > = (props) => {
    const { data } = props ?? {};

    return rateMentor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RateMentorMutationResult = NonNullable<
  Awaited<ReturnType<typeof rateMentor>>
>;
export type RateMentorMutationBody = Rating;
export type RateMentorMutationError = AxiosError<unknown>;

export const useRateMentor = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof rateMentor>>,
      TError,
      { data: Rating },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof rateMentor>>,
  TError,
  { data: Rating },
  TContext
> => {
  const mutationOptions = getRateMentorMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getRatingsByMentor = (
  mentorId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Rating[]>> => {
  return axios.default.get(`/api/rating/mentor/${mentorId}/ratings`, options);
};

export const getGetRatingsByMentorQueryKey = (mentorId: string) => {
  return [`/api/rating/mentor/${mentorId}/ratings`] as const;
};

export const getGetRatingsByMentorQueryOptions = <
  TData = Awaited<ReturnType<typeof getRatingsByMentor>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRatingsByMentor>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRatingsByMentorQueryKey(mentorId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRatingsByMentor>>
  > = ({ signal }) => getRatingsByMentor(mentorId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!mentorId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRatingsByMentor>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetRatingsByMentorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRatingsByMentor>>
>;
export type GetRatingsByMentorQueryError = AxiosError<unknown>;

export function useGetRatingsByMentor<
  TData = Awaited<ReturnType<typeof getRatingsByMentor>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRatingsByMentor>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRatingsByMentor>>,
          TError,
          Awaited<ReturnType<typeof getRatingsByMentor>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRatingsByMentor<
  TData = Awaited<ReturnType<typeof getRatingsByMentor>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRatingsByMentor>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRatingsByMentor>>,
          TError,
          Awaited<ReturnType<typeof getRatingsByMentor>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRatingsByMentor<
  TData = Awaited<ReturnType<typeof getRatingsByMentor>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRatingsByMentor>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRatingsByMentor<
  TData = Awaited<ReturnType<typeof getRatingsByMentor>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getRatingsByMentor>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRatingsByMentorQueryOptions(mentorId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAverageRating = (
  mentorId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<MentorAverageRating>> => {
  return axios.default.get(`/api/rating/mentor/${mentorId}/average`, options);
};

export const getGetAverageRatingQueryKey = (mentorId: string) => {
  return [`/api/rating/mentor/${mentorId}/average`] as const;
};

export const getGetAverageRatingQueryOptions = <
  TData = Awaited<ReturnType<typeof getAverageRating>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAverageRating>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAverageRatingQueryKey(mentorId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAverageRating>>
  > = ({ signal }) => getAverageRating(mentorId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!mentorId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAverageRating>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAverageRatingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAverageRating>>
>;
export type GetAverageRatingQueryError = AxiosError<unknown>;

export function useGetAverageRating<
  TData = Awaited<ReturnType<typeof getAverageRating>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAverageRating>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAverageRating>>,
          TError,
          Awaited<ReturnType<typeof getAverageRating>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAverageRating<
  TData = Awaited<ReturnType<typeof getAverageRating>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAverageRating>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAverageRating>>,
          TError,
          Awaited<ReturnType<typeof getAverageRating>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAverageRating<
  TData = Awaited<ReturnType<typeof getAverageRating>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAverageRating>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetAverageRating<
  TData = Awaited<ReturnType<typeof getAverageRating>>,
  TError = AxiosError<unknown>,
>(
  mentorId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAverageRating>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAverageRatingQueryOptions(mentorId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
